Testing scenarios to achieve 1000 simultanious users.

#Gunicorn 4 workers

    execution: local
        script: test_suggestions.js
        output: json (results.html)

     scenarios: (100.00%) 1 scenario, 100 max VUs, 2m10s max duration (incl. graceful stop):
              * default: Up to 100 looping VUs for 1m40s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)


     ✓ status is 200

     checks.........................: 100.00% 2403 out of 2403
     data_received..................: 5.1 MB  51 kB/s
     data_sent......................: 391 kB  3.9 kB/s
     http_req_blocked...............: avg=129.01µs min=2.91µs  med=8.49µs   max=100.72ms p(90)=14.31µs p(95)=35.49µs
     http_req_connecting............: avg=16.99µs  min=0s      med=0s       max=15.46ms  p(90)=0s      p(95)=0s     
     http_req_duration..............: avg=2.36s    min=63.5ms  med=2.47s    max=6.36s    p(90)=3.66s   p(95)=4.12s  
       { expected_response:true }...: avg=2.36s    min=63.5ms  med=2.47s    max=6.36s    p(90)=3.66s   p(95)=4.12s  
     http_req_failed................: 0.00%   0 out of 2403
     http_req_receiving.............: avg=8.33ms   min=27.3µs  med=161.31µs max=333.32ms p(90)=26.16ms p(95)=54.3ms 
     http_req_sending...............: avg=400.29µs min=8.03µs  med=26µs     max=126.49ms p(90)=46.07µs p(95)=62.4µs 
     http_req_tls_handshaking.......: avg=0s       min=0s      med=0s       max=0s       p(90)=0s      p(95)=0s     
     http_req_waiting...............: avg=2.35s    min=63.38ms med=2.46s    max=6.36s    p(90)=3.65s   p(95)=4.09s  
     http_reqs......................: 2403    23.863075/s
     iteration_duration.............: avg=3.37s    min=1.06s   med=3.48s    max=7.36s    p(90)=4.69s   p(95)=5.13s  
     iterations.....................: 2403    23.863075/s
     vus............................: 8       min=4            max=100
     vus_max........................: 100     min=100          max=100

#Gunicorn 6x workers

     execution: local
        script: test_suggestions.js
        output: -

     scenarios: (100.00%) 1 scenario, 100 max VUs, 2m10s max duration (incl. graceful stop):
              * default: Up to 100 looping VUs for 1m40s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)


     ✓ status is 200

     checks.........................: 100.00% 3207 out of 3207
     data_received..................: 6.8 MB  68 kB/s
     data_sent......................: 520 kB  5.2 kB/s
     http_req_blocked...............: avg=109.9µs min=3.22µs  med=8.74µs  max=261.03ms p(90)=14.69µs  p(95)=22.34µs
     http_req_connecting............: avg=16.68µs min=0s      med=0s      max=27.89ms  p(90)=0s       p(95)=0s     
     http_req_duration..............: avg=1.52s   min=64.43ms med=1.62s   max=3.77s    p(90)=2.24s    p(95)=2.4s   
       { expected_response:true }...: avg=1.52s   min=64.43ms med=1.62s   max=3.77s    p(90)=2.24s    p(95)=2.4s   
     http_req_failed................: 0.00%   0 out of 3207
     http_req_receiving.............: avg=1.61ms  min=30.03µs med=218.5µs max=145.48ms p(90)=804.17µs p(95)=6.74ms 
     http_req_sending...............: avg=32.28µs min=8.82µs  med=26.1µs  max=4.96ms   p(90)=43.25µs  p(95)=53.63µs
     http_req_tls_handshaking.......: avg=0s      min=0s      med=0s      max=0s       p(90)=0s       p(95)=0s     
     http_req_waiting...............: avg=1.52s   min=64.14ms med=1.61s   max=3.75s    p(90)=2.24s    p(95)=2.4s   
     http_reqs......................: 3207    31.864717/s
     iteration_duration.............: avg=2.52s   min=1.06s   med=2.62s   max=4.77s    p(90)=3.25s    p(95)=3.4s   
     iterations.....................: 3207    31.864717/s
     vus............................: 7       min=4            max=100
     vus_max........................: 100     min=100          max=100

# Container Usage during test
# CPU model name      : Intel(R) Core(TM) i7-3930K CPU @ 3.20GHz

CONTAINER ID   NAME                 CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O         PIDS
cc0ab8f49b14   determined_volhard   522.76%   6.442GiB / 19.55GiB   32.96%    2.29MB / 14.5MB   98.3kB / 1.16MB   167


Performance Estimation for 1,000 Concurrent Users
    Current Local Testing:
        •	100 VUs, ~1.52s average response time, ~2.4s P95.
        •	Single container using ~5 CPU cores and ~6.4 GiB RAM.
        •	Goal: 1,000 VUs with <1s P95 latency.

Proposed Fargate Configuration:
    •	ECS Service with 10 tasks, each 4 vCPU / 8 GiB.
    •	Total 40 vCPUs and 80 GiB memory.
    •	Place behind an Application Load Balancer with path-based or host-based routing, health checks, etc.
    •	Configure autoscaling on CPU or request count to handle peak loads dynamically.

Approximate Fargate cost breakdown for a typical ecommerce-like application that scales up during the day and scales down overnight.

    Estimated AWS Fargate Cost for an Ecommerce-Style App
	•	Fargate Tasks: Each task has 4 vCPU + 8 GiB RAM.
	•	Scaling: 10 tasks (peak) for 12 hours, 2 tasks (off-peak) for 12 hours.
	•	Daily Cost: ~$28.44
	•	Monthly Cost: ~$853
	•	Additional Charges: ALB usage, data transfer, and CloudWatch logs can increase overall cost by ~10–20%, depending on traffic.
	•	This configuration is a starting point; actual performance needs and traffic patterns may require adjustments in task count or sizing.
